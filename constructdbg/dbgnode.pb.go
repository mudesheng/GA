// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dbgnode.proto

package constructdbg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DBGNodeInfo struct {
	ID                   uint32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EdgeIDIncoming       []uint32 `protobuf:"varint,2,rep,packed,name=EdgeIDIncoming,proto3" json:"EdgeIDIncoming,omitempty"`
	EdgeIDOutcoming      []uint32 `protobuf:"varint,3,rep,packed,name=EdgeIDOutcoming,proto3" json:"EdgeIDOutcoming,omitempty"`
	Seq                  []uint64 `protobuf:"varint,4,rep,packed,name=Seq,proto3" json:"Seq,omitempty"`
	Flag                 uint32   `protobuf:"varint,5,opt,name=Flag,proto3" json:"Flag,omitempty"`
	SubGID               uint32   `protobuf:"varint,6,opt,name=SubGID,proto3" json:"SubGID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DBGNodeInfo) Reset()         { *m = DBGNodeInfo{} }
func (m *DBGNodeInfo) String() string { return proto.CompactTextString(m) }
func (*DBGNodeInfo) ProtoMessage()    {}
func (*DBGNodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbgnode_df81482f11749b91, []int{0}
}
func (m *DBGNodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBGNodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBGNodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DBGNodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBGNodeInfo.Merge(dst, src)
}
func (m *DBGNodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *DBGNodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DBGNodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DBGNodeInfo proto.InternalMessageInfo

func (m *DBGNodeInfo) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DBGNodeInfo) GetEdgeIDIncoming() []uint32 {
	if m != nil {
		return m.EdgeIDIncoming
	}
	return nil
}

func (m *DBGNodeInfo) GetEdgeIDOutcoming() []uint32 {
	if m != nil {
		return m.EdgeIDOutcoming
	}
	return nil
}

func (m *DBGNodeInfo) GetSeq() []uint64 {
	if m != nil {
		return m.Seq
	}
	return nil
}

func (m *DBGNodeInfo) GetFlag() uint32 {
	if m != nil {
		return m.Flag
	}
	return 0
}

func (m *DBGNodeInfo) GetSubGID() uint32 {
	if m != nil {
		return m.SubGID
	}
	return 0
}

type DBGNodeArr struct {
	Arr                  []*DBGNodeInfo `protobuf:"bytes,1,rep,name=arr,proto3" json:"arr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DBGNodeArr) Reset()         { *m = DBGNodeArr{} }
func (m *DBGNodeArr) String() string { return proto.CompactTextString(m) }
func (*DBGNodeArr) ProtoMessage()    {}
func (*DBGNodeArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbgnode_df81482f11749b91, []int{1}
}
func (m *DBGNodeArr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DBGNodeArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DBGNodeArr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DBGNodeArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DBGNodeArr.Merge(dst, src)
}
func (m *DBGNodeArr) XXX_Size() int {
	return m.Size()
}
func (m *DBGNodeArr) XXX_DiscardUnknown() {
	xxx_messageInfo_DBGNodeArr.DiscardUnknown(m)
}

var xxx_messageInfo_DBGNodeArr proto.InternalMessageInfo

func (m *DBGNodeArr) GetArr() []*DBGNodeInfo {
	if m != nil {
		return m.Arr
	}
	return nil
}

type ReadPath struct {
	ReadID               uint32   `protobuf:"varint,1,opt,name=ReadID,proto3" json:"ReadID,omitempty"`
	Qual                 uint32   `protobuf:"varint,2,opt,name=Qual,proto3" json:"Qual,omitempty"`
	Path0                []uint32 `protobuf:"varint,3,rep,packed,name=Path0,proto3" json:"Path0,omitempty"`
	Path1                []uint32 `protobuf:"varint,4,rep,packed,name=Path1,proto3" json:"Path1,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadPath) Reset()         { *m = ReadPath{} }
func (m *ReadPath) String() string { return proto.CompactTextString(m) }
func (*ReadPath) ProtoMessage()    {}
func (*ReadPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbgnode_df81482f11749b91, []int{2}
}
func (m *ReadPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ReadPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadPath.Merge(dst, src)
}
func (m *ReadPath) XXX_Size() int {
	return m.Size()
}
func (m *ReadPath) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadPath.DiscardUnknown(m)
}

var xxx_messageInfo_ReadPath proto.InternalMessageInfo

func (m *ReadPath) GetReadID() uint32 {
	if m != nil {
		return m.ReadID
	}
	return 0
}

func (m *ReadPath) GetQual() uint32 {
	if m != nil {
		return m.Qual
	}
	return 0
}

func (m *ReadPath) GetPath0() []uint32 {
	if m != nil {
		return m.Path0
	}
	return nil
}

func (m *ReadPath) GetPath1() []uint32 {
	if m != nil {
		return m.Path1
	}
	return nil
}

type PathArr struct {
	Arr                  []*ReadPath `protobuf:"bytes,1,rep,name=arr,proto3" json:"arr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PathArr) Reset()         { *m = PathArr{} }
func (m *PathArr) String() string { return proto.CompactTextString(m) }
func (*PathArr) ProtoMessage()    {}
func (*PathArr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbgnode_df81482f11749b91, []int{3}
}
func (m *PathArr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PathArr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PathArr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PathArr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathArr.Merge(dst, src)
}
func (m *PathArr) XXX_Size() int {
	return m.Size()
}
func (m *PathArr) XXX_DiscardUnknown() {
	xxx_messageInfo_PathArr.DiscardUnknown(m)
}

var xxx_messageInfo_PathArr proto.InternalMessageInfo

func (m *PathArr) GetArr() []*ReadPath {
	if m != nil {
		return m.Arr
	}
	return nil
}

func init() {
	proto.RegisterType((*DBGNodeInfo)(nil), "constructdbg.DBGNodeInfo")
	proto.RegisterType((*DBGNodeArr)(nil), "constructdbg.DBGNodeArr")
	proto.RegisterType((*ReadPath)(nil), "constructdbg.ReadPath")
	proto.RegisterType((*PathArr)(nil), "constructdbg.PathArr")
}
func (m *DBGNodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBGNodeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(m.ID))
	}
	if len(m.EdgeIDIncoming) > 0 {
		dAtA2 := make([]byte, len(m.EdgeIDIncoming)*10)
		var j1 int
		for _, num := range m.EdgeIDIncoming {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.EdgeIDOutcoming) > 0 {
		dAtA4 := make([]byte, len(m.EdgeIDOutcoming)*10)
		var j3 int
		for _, num := range m.EdgeIDOutcoming {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Seq) > 0 {
		dAtA6 := make([]byte, len(m.Seq)*10)
		var j5 int
		for _, num := range m.Seq {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.Flag != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(m.Flag))
	}
	if m.SubGID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(m.SubGID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DBGNodeArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DBGNodeArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arr) > 0 {
		for _, msg := range m.Arr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDbgnode(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReadPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadPath) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReadID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(m.ReadID))
	}
	if m.Qual != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(m.Qual))
	}
	if len(m.Path0) > 0 {
		dAtA8 := make([]byte, len(m.Path0)*10)
		var j7 int
		for _, num := range m.Path0 {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.Path1) > 0 {
		dAtA10 := make([]byte, len(m.Path1)*10)
		var j9 int
		for _, num := range m.Path1 {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintDbgnode(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PathArr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PathArr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Arr) > 0 {
		for _, msg := range m.Arr {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDbgnode(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDbgnode(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DBGNodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDbgnode(uint64(m.ID))
	}
	if len(m.EdgeIDIncoming) > 0 {
		l = 0
		for _, e := range m.EdgeIDIncoming {
			l += sovDbgnode(uint64(e))
		}
		n += 1 + sovDbgnode(uint64(l)) + l
	}
	if len(m.EdgeIDOutcoming) > 0 {
		l = 0
		for _, e := range m.EdgeIDOutcoming {
			l += sovDbgnode(uint64(e))
		}
		n += 1 + sovDbgnode(uint64(l)) + l
	}
	if len(m.Seq) > 0 {
		l = 0
		for _, e := range m.Seq {
			l += sovDbgnode(uint64(e))
		}
		n += 1 + sovDbgnode(uint64(l)) + l
	}
	if m.Flag != 0 {
		n += 1 + sovDbgnode(uint64(m.Flag))
	}
	if m.SubGID != 0 {
		n += 1 + sovDbgnode(uint64(m.SubGID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DBGNodeArr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arr) > 0 {
		for _, e := range m.Arr {
			l = e.Size()
			n += 1 + l + sovDbgnode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReadPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReadID != 0 {
		n += 1 + sovDbgnode(uint64(m.ReadID))
	}
	if m.Qual != 0 {
		n += 1 + sovDbgnode(uint64(m.Qual))
	}
	if len(m.Path0) > 0 {
		l = 0
		for _, e := range m.Path0 {
			l += sovDbgnode(uint64(e))
		}
		n += 1 + sovDbgnode(uint64(l)) + l
	}
	if len(m.Path1) > 0 {
		l = 0
		for _, e := range m.Path1 {
			l += sovDbgnode(uint64(e))
		}
		n += 1 + sovDbgnode(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PathArr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Arr) > 0 {
		for _, e := range m.Arr {
			l = e.Size()
			n += 1 + l + sovDbgnode(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDbgnode(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDbgnode(x uint64) (n int) {
	return sovDbgnode(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DBGNodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbgnode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBGNodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBGNodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EdgeIDIncoming = append(m.EdgeIDIncoming, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDbgnode
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EdgeIDIncoming) == 0 {
					m.EdgeIDIncoming = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbgnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EdgeIDIncoming = append(m.EdgeIDIncoming, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeIDIncoming", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.EdgeIDOutcoming = append(m.EdgeIDOutcoming, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDbgnode
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.EdgeIDOutcoming) == 0 {
					m.EdgeIDOutcoming = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbgnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.EdgeIDOutcoming = append(m.EdgeIDOutcoming, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field EdgeIDOutcoming", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Seq = append(m.Seq, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDbgnode
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Seq) == 0 {
					m.Seq = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbgnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Seq = append(m.Seq, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			m.Flag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flag |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubGID", wireType)
			}
			m.SubGID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubGID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbgnode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDbgnode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DBGNodeArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbgnode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DBGNodeArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DBGNodeArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbgnode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arr = append(m.Arr, &DBGNodeInfo{})
			if err := m.Arr[len(m.Arr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbgnode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDbgnode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbgnode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadID", wireType)
			}
			m.ReadID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qual", wireType)
			}
			m.Qual = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qual |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Path0 = append(m.Path0, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDbgnode
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Path0) == 0 {
					m.Path0 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbgnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Path0 = append(m.Path0, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Path0", wireType)
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Path1 = append(m.Path1, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDbgnode
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Path1) == 0 {
					m.Path1 = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDbgnode
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Path1 = append(m.Path1, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Path1", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDbgnode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDbgnode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PathArr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDbgnode
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PathArr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PathArr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDbgnode
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arr = append(m.Arr, &ReadPath{})
			if err := m.Arr[len(m.Arr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDbgnode(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDbgnode
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDbgnode(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDbgnode
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDbgnode
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDbgnode
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDbgnode
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDbgnode(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDbgnode = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDbgnode   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dbgnode.proto", fileDescriptor_dbgnode_df81482f11749b91) }

var fileDescriptor_dbgnode_df81482f11749b91 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4d, 0x4e, 0xeb, 0x30,
	0x14, 0x85, 0x9f, 0xe3, 0x34, 0x0f, 0xdd, 0x92, 0x52, 0x59, 0xa8, 0x32, 0x93, 0x28, 0xca, 0x00,
	0x59, 0x42, 0x8a, 0x28, 0x1d, 0x31, 0xa4, 0x0a, 0x54, 0x9e, 0xf0, 0x93, 0xae, 0x20, 0x89, 0x43,
	0x40, 0x2a, 0x31, 0x98, 0x64, 0x2f, 0x6c, 0x82, 0x7d, 0x30, 0x64, 0x09, 0x28, 0x6c, 0x04, 0xd9,
	0x71, 0x51, 0xe8, 0xec, 0xdc, 0x4f, 0xd7, 0xf6, 0x77, 0x64, 0xf0, 0x45, 0x5e, 0xd5, 0x52, 0x94,
	0xf1, 0xb3, 0x92, 0x8d, 0x24, 0xfb, 0x85, 0xac, 0x5f, 0x1b, 0xd5, 0x16, 0x8d, 0xc8, 0xab, 0xe8,
	0x1d, 0xc1, 0x38, 0x59, 0xae, 0xae, 0xa5, 0x28, 0x79, 0x7d, 0x2f, 0xc9, 0x04, 0x1c, 0x9e, 0x50,
	0x14, 0x22, 0xe6, 0xa7, 0x0e, 0x4f, 0xc8, 0x31, 0x4c, 0x2e, 0x45, 0x55, 0xf2, 0x84, 0xd7, 0x85,
	0x7c, 0x7a, 0xac, 0x2b, 0xea, 0x84, 0x98, 0xf9, 0xe9, 0x0e, 0x25, 0x0c, 0x0e, 0x7a, 0x72, 0xd3,
	0x36, 0x76, 0x11, 0x9b, 0xc5, 0x5d, 0x4c, 0xa6, 0x80, 0xd7, 0xe5, 0x0b, 0x75, 0x43, 0xcc, 0xdc,
	0x54, 0x47, 0x42, 0xc0, 0xbd, 0xda, 0x64, 0x15, 0x1d, 0x99, 0x57, 0x4d, 0x26, 0x33, 0xf0, 0xd6,
	0x6d, 0xbe, 0xe2, 0x09, 0xf5, 0x0c, 0xb5, 0x53, 0x74, 0x0e, 0x60, 0x75, 0x2f, 0x94, 0x22, 0x27,
	0x80, 0x33, 0xa5, 0x28, 0x0a, 0x31, 0x1b, 0x9f, 0x1d, 0xc5, 0xc3, 0x66, 0xf1, 0xa0, 0x55, 0xaa,
	0xb7, 0xa2, 0x1c, 0xf6, 0xd2, 0x32, 0x13, 0xb7, 0x59, 0xf3, 0xa0, 0xaf, 0xd7, 0xf9, 0xb7, 0xaa,
	0x9d, 0xb4, 0xca, 0x5d, 0x9b, 0x6d, 0xa8, 0xd3, 0xab, 0xe8, 0x4c, 0x0e, 0x61, 0xa4, 0xcf, 0x9c,
	0xda, 0x42, 0xfd, 0xb0, 0xa5, 0x73, 0x53, 0xc4, 0xd2, 0x79, 0xb4, 0x80, 0xff, 0x3a, 0x68, 0x37,
	0x36, 0x74, 0x9b, 0xfd, 0x75, 0xdb, 0x7a, 0x18, 0xb1, 0xe5, 0xf4, 0xa3, 0x0b, 0xd0, 0x67, 0x17,
	0xa0, 0xaf, 0x2e, 0x40, 0x6f, 0xdf, 0xc1, 0xbf, 0xdc, 0x33, 0x5f, 0xb5, 0xf8, 0x09, 0x00, 0x00,
	0xff, 0xff, 0x24, 0xc9, 0x7c, 0xca, 0xbb, 0x01, 0x00, 0x00,
}
